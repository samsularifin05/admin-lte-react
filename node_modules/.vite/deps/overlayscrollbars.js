import "./chunk-EQCVQC35.js";

// node_modules/overlayscrollbars/overlayscrollbars.mjs
var createCache = (t2, n2) => {
  const { o: o2, i: s2, u: e2 } = t2;
  let c2 = o2;
  let r2;
  const cacheUpdateContextual = (t3, n3) => {
    const o3 = c2;
    const l2 = t3;
    const i2 = n3 || (s2 ? !s2(o3, l2) : o3 !== l2);
    if (i2 || e2) {
      c2 = l2;
      r2 = o3;
    }
    return [c2, i2, r2];
  };
  const cacheUpdateIsolated = (t3) => cacheUpdateContextual(n2(c2, r2), t3);
  const getCurrentCache = (t3) => [c2, !!t3, r2];
  return [n2 ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache];
};
var t = typeof window !== "undefined" && typeof HTMLElement !== "undefined" && !!window.document;
var n = t ? window : {};
var o = Math.max;
var s = Math.min;
var e = Math.round;
var c = Math.abs;
var r = Math.sign;
var l = n.cancelAnimationFrame;
var i = n.requestAnimationFrame;
var a = n.setTimeout;
var u = n.clearTimeout;
var getApi = (t2) => typeof n[t2] !== "undefined" ? n[t2] : void 0;
var f = getApi("MutationObserver");
var _ = getApi("IntersectionObserver");
var d = getApi("ResizeObserver");
var p = getApi("ScrollTimeline");
var isUndefined = (t2) => t2 === void 0;
var isNull = (t2) => t2 === null;
var isNumber = (t2) => typeof t2 === "number";
var isString = (t2) => typeof t2 === "string";
var isBoolean = (t2) => typeof t2 === "boolean";
var isFunction = (t2) => typeof t2 === "function";
var isArray = (t2) => Array.isArray(t2);
var isObject = (t2) => typeof t2 === "object" && !isArray(t2) && !isNull(t2);
var isArrayLike = (t2) => {
  const n2 = !!t2 && t2.length;
  const o2 = isNumber(n2) && n2 > -1 && n2 % 1 == 0;
  return isArray(t2) || !isFunction(t2) && o2 ? n2 > 0 && isObject(t2) ? n2 - 1 in t2 : true : false;
};
var isPlainObject = (t2) => !!t2 && t2.constructor === Object;
var isHTMLElement = (t2) => t2 instanceof HTMLElement;
var isElement = (t2) => t2 instanceof Element;
var animationCurrentTime = () => performance.now();
var animateNumber = (t2, n2, s2, e2, c2) => {
  let r2 = 0;
  const a2 = animationCurrentTime();
  const u2 = o(0, s2);
  const frame = (s3) => {
    const l2 = animationCurrentTime();
    const f2 = l2 - a2;
    const _2 = f2 >= u2;
    const d2 = s3 ? 1 : 1 - (o(0, a2 + u2 - l2) / u2 || 0);
    const p2 = (n2 - t2) * (isFunction(c2) ? c2(d2, d2 * u2, 0, 1, u2) : d2) + t2;
    const v2 = _2 || d2 === 1;
    if (e2) {
      e2(p2, d2, v2);
    }
    r2 = v2 ? 0 : i(() => frame());
  };
  frame();
  return (t3) => {
    l(r2);
    if (t3) {
      frame(t3);
    }
  };
};
function each(t2, n2) {
  if (isArrayLike(t2)) {
    for (let o2 = 0; o2 < t2.length; o2++) {
      if (n2(t2[o2], o2, t2) === false) {
        break;
      }
    }
  } else if (t2) {
    each(Object.keys(t2), (o2) => n2(t2[o2], o2, t2));
  }
  return t2;
}
var inArray = (t2, n2) => t2.indexOf(n2) >= 0;
var concat = (t2, n2) => t2.concat(n2);
var push = (t2, n2, o2) => {
  if (!isString(n2) && isArrayLike(n2)) {
    Array.prototype.push.apply(t2, n2);
  } else {
    t2.push(n2);
  }
  return t2;
};
var from = (t2) => Array.from(t2 || []);
var createOrKeepArray = (t2) => {
  if (isArray(t2)) {
    return t2;
  }
  return !isString(t2) && isArrayLike(t2) ? from(t2) : [t2];
};
var isEmptyArray = (t2) => !!t2 && !t2.length;
var deduplicateArray = (t2) => from(new Set(t2));
var runEachAndClear = (t2, n2, o2) => {
  const runFn = (t3) => t3 ? t3.apply(void 0, n2 || []) : true;
  each(t2, runFn);
  if (!o2) {
    t2.length = 0;
  }
};
var v = "paddingTop";
var h = "paddingRight";
var g = "paddingLeft";
var b = "paddingBottom";
var w = "marginLeft";
var y = "marginRight";
var S = "marginBottom";
var m = "overflowX";
var O = "overflowY";
var $ = "width";
var C = "height";
var x = "visible";
var H = "hidden";
var E = "scroll";
var capitalizeFirstLetter = (t2) => {
  const n2 = String(t2 || "");
  return n2 ? n2[0].toUpperCase() + n2.slice(1) : "";
};
var equal = (t2, n2, o2, s2) => {
  if (t2 && n2) {
    let s3 = true;
    each(o2, (o3) => {
      const e2 = t2[o3];
      const c2 = n2[o3];
      if (e2 !== c2) {
        s3 = false;
      }
    });
    return s3;
  }
  return false;
};
var equalWH = (t2, n2) => equal(t2, n2, ["w", "h"]);
var equalXY = (t2, n2) => equal(t2, n2, ["x", "y"]);
var equalTRBL = (t2, n2) => equal(t2, n2, ["t", "r", "b", "l"]);
var noop = () => {
};
var bind = (t2, ...n2) => t2.bind(0, ...n2);
var selfClearTimeout = (t2) => {
  let n2;
  const o2 = t2 ? a : i;
  const s2 = t2 ? u : l;
  return [(e2) => {
    s2(n2);
    n2 = o2(() => e2(), isFunction(t2) ? t2() : t2);
  }, () => s2(n2)];
};
var debounce = (t2, n2) => {
  const { _: o2, p: s2, v: e2, S: c2 } = n2 || {};
  let r2;
  let f2;
  let _2;
  let d2;
  let p2 = noop;
  const v2 = function invokeFunctionToDebounce(n3) {
    p2();
    u(r2);
    d2 = r2 = f2 = void 0;
    p2 = noop;
    t2.apply(this, n3);
  };
  const mergeParms = (t3) => c2 && f2 ? c2(f2, t3) : t3;
  const flush = () => {
    if (p2 !== noop) {
      v2(mergeParms(_2) || _2);
    }
  };
  const h2 = function debouncedFn() {
    const t3 = from(arguments);
    const n3 = isFunction(o2) ? o2() : o2;
    const c3 = isNumber(n3) && n3 >= 0;
    if (c3) {
      const o3 = isFunction(s2) ? s2() : s2;
      const c4 = isNumber(o3) && o3 >= 0;
      const h3 = n3 > 0 ? a : i;
      const g2 = n3 > 0 ? u : l;
      const b2 = mergeParms(t3);
      const w2 = b2 || t3;
      const y2 = v2.bind(0, w2);
      let S2;
      p2();
      if (e2 && !d2) {
        y2();
        d2 = true;
        S2 = h3(() => d2 = void 0, n3);
      } else {
        S2 = h3(y2, n3);
        if (c4 && !r2) {
          r2 = a(flush, o3);
        }
      }
      p2 = () => g2(S2);
      f2 = _2 = w2;
    } else {
      v2(t3);
    }
  };
  h2.m = flush;
  return h2;
};
var hasOwnProperty = (t2, n2) => Object.prototype.hasOwnProperty.call(t2, n2);
var keys = (t2) => t2 ? Object.keys(t2) : [];
var assignDeep = (t2, n2, o2, s2, e2, c2, r2) => {
  const l2 = [n2, o2, s2, e2, c2, r2];
  if ((typeof t2 !== "object" || isNull(t2)) && !isFunction(t2)) {
    t2 = {};
  }
  each(l2, (n3) => {
    each(n3, (o3, s3) => {
      const e3 = n3[s3];
      if (t2 === e3) {
        return true;
      }
      const c3 = isArray(e3);
      if (e3 && isPlainObject(e3)) {
        const n4 = t2[s3];
        let o4 = n4;
        if (c3 && !isArray(n4)) {
          o4 = [];
        } else if (!c3 && !isPlainObject(n4)) {
          o4 = {};
        }
        t2[s3] = assignDeep(o4, e3);
      } else {
        t2[s3] = c3 ? e3.slice() : e3;
      }
    });
  });
  return t2;
};
var removeUndefinedProperties = (t2, n2) => each(assignDeep({}, t2), (t3, n3, o2) => {
  if (t3 === void 0) {
    delete o2[n3];
  } else if (t3 && isPlainObject(t3)) {
    o2[n3] = removeUndefinedProperties(t3);
  }
});
var isEmptyObject = (t2) => !keys(t2).length;
var capNumber = (t2, n2, e2) => o(t2, s(n2, e2));
var getDomTokensArray = (t2) => deduplicateArray((isArray(t2) ? t2 : (t2 || "").split(" ")).filter((t3) => t3));
var getAttr = (t2, n2) => t2 && t2.getAttribute(n2);
var hasAttr = (t2, n2) => t2 && t2.hasAttribute(n2);
var setAttrs = (t2, n2, o2) => {
  each(getDomTokensArray(n2), (n3) => {
    if (t2) {
      t2.setAttribute(n3, String(o2 || ""));
    }
  });
};
var removeAttrs = (t2, n2) => {
  each(getDomTokensArray(n2), (n3) => t2 && t2.removeAttribute(n3));
};
var domTokenListAttr = (t2, n2) => {
  const o2 = getDomTokensArray(getAttr(t2, n2));
  const s2 = bind(setAttrs, t2, n2);
  const domTokenListOperation = (t3, n3) => {
    const s3 = new Set(o2);
    each(getDomTokensArray(t3), (t4) => {
      s3[n3](t4);
    });
    return from(s3).join(" ");
  };
  return {
    O: (t3) => s2(domTokenListOperation(t3, "delete")),
    $: (t3) => s2(domTokenListOperation(t3, "add")),
    C: (t3) => {
      const n3 = getDomTokensArray(t3);
      return n3.reduce((t4, n4) => t4 && o2.includes(n4), n3.length > 0);
    }
  };
};
var removeAttrClass = (t2, n2, o2) => {
  domTokenListAttr(t2, n2).O(o2);
  return bind(addAttrClass, t2, n2, o2);
};
var addAttrClass = (t2, n2, o2) => {
  domTokenListAttr(t2, n2).$(o2);
  return bind(removeAttrClass, t2, n2, o2);
};
var addRemoveAttrClass = (t2, n2, o2, s2) => (s2 ? addAttrClass : removeAttrClass)(t2, n2, o2);
var hasAttrClass = (t2, n2, o2) => domTokenListAttr(t2, n2).C(o2);
var createDomTokenListClass = (t2) => domTokenListAttr(t2, "class");
var removeClass = (t2, n2) => {
  createDomTokenListClass(t2).O(n2);
};
var addClass = (t2, n2) => {
  createDomTokenListClass(t2).$(n2);
  return bind(removeClass, t2, n2);
};
var find = (t2, n2) => {
  const o2 = n2 ? isElement(n2) && n2 : document;
  return o2 ? from(o2.querySelectorAll(t2)) : [];
};
var findFirst = (t2, n2) => {
  const o2 = n2 ? isElement(n2) && n2 : document;
  return o2 && o2.querySelector(t2);
};
var is = (t2, n2) => isElement(t2) && t2.matches(n2);
var isBodyElement = (t2) => is(t2, "body");
var contents = (t2) => t2 ? from(t2.childNodes) : [];
var parent = (t2) => t2 && t2.parentElement;
var closest = (t2, n2) => isElement(t2) && t2.closest(n2);
var getFocusedElement = (t2) => document.activeElement;
var liesBetween = (t2, n2, o2) => {
  const s2 = closest(t2, n2);
  const e2 = t2 && findFirst(o2, s2);
  const c2 = closest(e2, n2) === s2;
  return s2 && e2 ? s2 === t2 || e2 === t2 || c2 && closest(closest(t2, o2), n2) !== s2 : false;
};
var removeElements = (t2) => {
  each(createOrKeepArray(t2), (t3) => {
    const n2 = parent(t3);
    if (t3 && n2) {
      n2.removeChild(t3);
    }
  });
};
var appendChildren = (t2, n2) => bind(removeElements, t2 && n2 && each(createOrKeepArray(n2), (n3) => {
  if (n3) {
    t2.appendChild(n3);
  }
}));
var z;
var getTrustedTypePolicy = () => z;
var setTrustedTypePolicy = (t2) => {
  z = t2;
};
var createDiv = (t2) => {
  const n2 = document.createElement("div");
  setAttrs(n2, "class", t2);
  return n2;
};
var createDOM = (t2) => {
  const n2 = createDiv();
  const o2 = getTrustedTypePolicy();
  const s2 = t2.trim();
  n2.innerHTML = o2 ? o2.createHTML(s2) : s2;
  return each(contents(n2), (t3) => removeElements(t3));
};
var getCSSVal = (t2, n2) => t2.getPropertyValue(n2) || t2[n2] || "";
var validFiniteNumber = (t2) => {
  const n2 = t2 || 0;
  return isFinite(n2) ? n2 : 0;
};
var parseToZeroOrNumber = (t2) => validFiniteNumber(parseFloat(t2 || ""));
var roundCssNumber = (t2) => Math.round(t2 * 1e4) / 1e4;
var numberToCssPx = (t2) => `${roundCssNumber(validFiniteNumber(t2))}px`;
function setStyles(t2, n2) {
  t2 && n2 && each(n2, (n3, o2) => {
    try {
      const s2 = t2.style;
      const e2 = isNull(n3) || isBoolean(n3) ? "" : isNumber(n3) ? numberToCssPx(n3) : n3;
      if (o2.indexOf("--") === 0) {
        s2.setProperty(o2, e2);
      } else {
        s2[o2] = e2;
      }
    } catch (s2) {
    }
  });
}
function getStyles(t2, o2, s2) {
  const e2 = isString(o2);
  let c2 = e2 ? "" : {};
  if (t2) {
    const r2 = n.getComputedStyle(t2, s2) || t2.style;
    c2 = e2 ? getCSSVal(r2, o2) : from(o2).reduce((t3, n2) => {
      t3[n2] = getCSSVal(r2, n2);
      return t3;
    }, c2);
  }
  return c2;
}
var topRightBottomLeft = (t2, n2, o2) => {
  const s2 = n2 ? `${n2}-` : "";
  const e2 = o2 ? `-${o2}` : "";
  const c2 = `${s2}top${e2}`;
  const r2 = `${s2}right${e2}`;
  const l2 = `${s2}bottom${e2}`;
  const i2 = `${s2}left${e2}`;
  const a2 = getStyles(t2, [c2, r2, l2, i2]);
  return {
    t: parseToZeroOrNumber(a2[c2]),
    r: parseToZeroOrNumber(a2[r2]),
    b: parseToZeroOrNumber(a2[l2]),
    l: parseToZeroOrNumber(a2[i2])
  };
};
var getTrasformTranslateValue = (t2, n2) => `translate${isObject(t2) ? `(${t2.x},${t2.y})` : `${n2 ? "X" : "Y"}(${t2})`}`;
var elementHasDimensions = (t2) => !!(t2.offsetWidth || t2.offsetHeight || t2.getClientRects().length);
var I = {
  w: 0,
  h: 0
};
var getElmWidthHeightProperty = (t2, n2) => n2 ? {
  w: n2[`${t2}Width`],
  h: n2[`${t2}Height`]
} : I;
var getWindowSize = (t2) => getElmWidthHeightProperty("inner", t2 || n);
var A = bind(getElmWidthHeightProperty, "offset");
var D = bind(getElmWidthHeightProperty, "client");
var M = bind(getElmWidthHeightProperty, "scroll");
var getFractionalSize = (t2) => {
  const n2 = parseFloat(getStyles(t2, $)) || 0;
  const o2 = parseFloat(getStyles(t2, C)) || 0;
  return {
    w: n2 - e(n2),
    h: o2 - e(o2)
  };
};
var getBoundingClientRect = (t2) => t2.getBoundingClientRect();
var hasDimensions = (t2) => !!t2 && elementHasDimensions(t2);
var domRectHasDimensions = (t2) => !!(t2 && (t2[C] || t2[$]));
var domRectAppeared = (t2, n2) => {
  const o2 = domRectHasDimensions(t2);
  const s2 = domRectHasDimensions(n2);
  return !s2 && o2;
};
var removeEventListener = (t2, n2, o2, s2) => {
  each(getDomTokensArray(n2), (n3) => {
    if (t2) {
      t2.removeEventListener(n3, o2, s2);
    }
  });
};
var addEventListener = (t2, n2, o2, s2) => {
  var e2;
  const c2 = (e2 = s2 && s2.H) != null ? e2 : true;
  const r2 = s2 && s2.I || false;
  const l2 = s2 && s2.A || false;
  const i2 = {
    passive: c2,
    capture: r2
  };
  return bind(runEachAndClear, getDomTokensArray(n2).map((n3) => {
    const s3 = l2 ? (e3) => {
      removeEventListener(t2, n3, s3, r2);
      if (o2) {
        o2(e3);
      }
    } : o2;
    if (t2) {
      t2.addEventListener(n3, s3, i2);
    }
    return bind(removeEventListener, t2, n3, s3, r2);
  }));
};
var stopPropagation = (t2) => t2.stopPropagation();
var preventDefault = (t2) => t2.preventDefault();
var stopAndPrevent = (t2) => stopPropagation(t2) || preventDefault(t2);
var scrollElementTo = (t2, n2) => {
  const { x: o2, y: s2 } = isNumber(n2) ? {
    x: n2,
    y: n2
  } : n2 || {};
  isNumber(o2) && (t2.scrollLeft = o2);
  isNumber(s2) && (t2.scrollTop = s2);
};
var getElementScroll = (t2) => ({
  x: t2.scrollLeft,
  y: t2.scrollTop
});
var getZeroScrollCoordinates = () => ({
  D: {
    x: 0,
    y: 0
  },
  M: {
    x: 0,
    y: 0
  }
});
var sanitizeScrollCoordinates = (t2, n2) => {
  const { D: o2, M: s2 } = t2;
  const { w: e2, h: l2 } = n2;
  const sanitizeAxis = (t3, n3, o3) => {
    let s3 = r(t3) * o3;
    let e3 = r(n3) * o3;
    if (s3 === e3) {
      const o4 = c(t3);
      const r2 = c(n3);
      e3 = o4 > r2 ? 0 : e3;
      s3 = o4 < r2 ? 0 : s3;
    }
    s3 = s3 === e3 ? 0 : s3;
    return [s3 + 0, e3 + 0];
  };
  const [i2, a2] = sanitizeAxis(o2.x, s2.x, e2);
  const [u2, f2] = sanitizeAxis(o2.y, s2.y, l2);
  return {
    D: {
      x: i2,
      y: u2
    },
    M: {
      x: a2,
      y: f2
    }
  };
};
var isDefaultDirectionScrollCoordinates = ({ D: t2, M: n2 }) => {
  const getAxis = (t3, n3) => t3 === 0 && t3 <= n3;
  return {
    x: getAxis(t2.x, n2.x),
    y: getAxis(t2.y, n2.y)
  };
};
var getScrollCoordinatesPercent = ({ D: t2, M: n2 }, o2) => {
  const getAxis = (t3, n3, o3) => capNumber(0, 1, (t3 - o3) / (t3 - n3) || 0);
  return {
    x: getAxis(t2.x, n2.x, o2.x),
    y: getAxis(t2.y, n2.y, o2.y)
  };
};
var focusElement = (t2) => {
  if (t2 && t2.focus) {
    t2.focus({
      preventScroll: true
    });
  }
};
var manageListener = (t2, n2) => {
  each(createOrKeepArray(n2), t2);
};
var createEventListenerHub = (t2) => {
  const n2 = /* @__PURE__ */ new Map();
  const removeEvent = (t3, o2) => {
    if (t3) {
      const s2 = n2.get(t3);
      manageListener((t4) => {
        if (s2) {
          s2[t4 ? "delete" : "clear"](t4);
        }
      }, o2);
    } else {
      n2.forEach((t4) => {
        t4.clear();
      });
      n2.clear();
    }
  };
  const addEvent = (t3, o2) => {
    if (isString(t3)) {
      const s3 = n2.get(t3) || /* @__PURE__ */ new Set();
      n2.set(t3, s3);
      manageListener((t4) => {
        if (isFunction(t4)) {
          s3.add(t4);
        }
      }, o2);
      return bind(removeEvent, t3, o2);
    }
    if (isBoolean(o2) && o2) {
      removeEvent();
    }
    const s2 = keys(t3);
    const e2 = [];
    each(s2, (n3) => {
      const o3 = t3[n3];
      if (o3) {
        push(e2, addEvent(n3, o3));
      }
    });
    return bind(runEachAndClear, e2);
  };
  const triggerEvent = (t3, o2) => {
    each(from(n2.get(t3)), (t4) => {
      if (o2 && !isEmptyArray(o2)) {
        t4.apply(0, o2);
      } else {
        t4();
      }
    });
  };
  addEvent(t2 || {});
  return [addEvent, removeEvent, triggerEvent];
};
var T = {};
var k = {};
var addPlugins = (t2) => {
  each(t2, (t3) => each(t3, (n2, o2) => {
    T[o2] = t3[o2];
  }));
};
var registerPluginModuleInstances = (t2, n2, o2) => keys(t2).map((s2) => {
  const { static: e2, instance: c2 } = t2[s2];
  const [r2, l2, i2] = o2 || [];
  const a2 = o2 ? c2 : e2;
  if (a2) {
    const t3 = o2 ? a2(r2, l2, n2) : a2(n2);
    return (i2 || k)[s2] = t3;
  }
});
var getStaticPluginModuleInstance = (t2) => k[t2];
var R = "__osOptionsValidationPlugin";
var V = `data-overlayscrollbars`;
var L = "os-environment";
var U = `${L}-scrollbar-hidden`;
var P = `${V}-initialize`;
var N = "noClipping";
var q = `${V}-body`;
var B = V;
var F = "host";
var j = `${V}-viewport`;
var X = m;
var Y = O;
var W = "arrange";
var J = "measuring";
var G = "scrolling";
var K = "scrollbarHidden";
var Q = "noContent";
var Z = `${V}-padding`;
var tt = `${V}-content`;
var nt = "os-size-observer";
var ot = `${nt}-appear`;
var st = `${nt}-listener`;
var et = `${st}-scroll`;
var ct = `${st}-item`;
var rt = `${ct}-final`;
var lt = "os-trinsic-observer";
var it = "os-theme-none";
var at = "os-scrollbar";
var ut = `${at}-rtl`;
var ft = `${at}-horizontal`;
var _t = `${at}-vertical`;
var dt = `${at}-track`;
var pt = `${at}-handle`;
var vt = `${at}-visible`;
var ht = `${at}-cornerless`;
var gt = `${at}-interaction`;
var bt = `${at}-unusable`;
var wt = `${at}-auto-hide`;
var yt = `${wt}-hidden`;
var St = `${at}-wheel`;
var mt = `${dt}-interactive`;
var Ot = `${pt}-interactive`;
var $t = "__osSizeObserverPlugin";
var Ct = (() => ({
  [$t]: {
    static: () => (t2, n2, o2) => {
      const s2 = 3333333;
      const e2 = "scroll";
      const c2 = createDOM(`<div class="${ct}" dir="ltr"><div class="${ct}"><div class="${rt}"></div></div><div class="${ct}"><div class="${rt}" style="width: 200%; height: 200%"></div></div></div>`);
      const r2 = c2[0];
      const a2 = r2.lastChild;
      const u2 = r2.firstChild;
      const f2 = u2 == null ? void 0 : u2.firstChild;
      let _2 = A(r2);
      let d2 = _2;
      let p2 = false;
      let v2;
      const reset = () => {
        scrollElementTo(u2, s2);
        scrollElementTo(a2, s2);
      };
      const onResized = (t3) => {
        v2 = 0;
        if (p2) {
          _2 = d2;
          n2(t3 === true);
        }
      };
      const onScroll = (t3) => {
        d2 = A(r2);
        p2 = !t3 || !equalWH(d2, _2);
        if (t3) {
          stopPropagation(t3);
          if (p2 && !v2) {
            l(v2);
            v2 = i(onResized);
          }
        } else {
          onResized(t3 === false);
        }
        reset();
      };
      const h2 = [appendChildren(t2, c2), addEventListener(u2, e2, onScroll), addEventListener(a2, e2, onScroll)];
      addClass(t2, et);
      setStyles(f2, {
        [$]: s2,
        [C]: s2
      });
      i(reset);
      return [o2 ? bind(onScroll, false) : reset, h2];
    }
  }
}))();
var getShowNativeOverlaidScrollbars = (t2, n2) => {
  const { T: o2 } = n2;
  const [s2, e2] = t2("showNativeOverlaidScrollbars");
  return [s2 && o2.x && o2.y, e2];
};
var overflowIsVisible = (t2) => t2.indexOf(x) === 0;
var createViewportOverflowState = (t2, n2) => {
  const getAxisOverflowStyle = (t3, n3, o3, s2) => {
    const e2 = t3 === x ? H : t3.replace(`${x}-`, "");
    const c2 = overflowIsVisible(t3);
    const r2 = overflowIsVisible(o3);
    if (!n3 && !s2) {
      return H;
    }
    if (c2 && r2) {
      return x;
    }
    if (c2) {
      const t4 = n3 ? x : H;
      return n3 && s2 ? e2 : t4;
    }
    const l2 = r2 && s2 ? x : H;
    return n3 ? e2 : l2;
  };
  const o2 = {
    x: getAxisOverflowStyle(n2.x, t2.x, n2.y, t2.y),
    y: getAxisOverflowStyle(n2.y, t2.y, n2.x, t2.x)
  };
  return {
    k: o2,
    R: {
      x: o2.x === E,
      y: o2.y === E
    }
  };
};
var xt = "__osScrollbarsHidingPlugin";
var Ht = (() => ({
  [xt]: {
    static: () => ({
      V: (t2, n2, o2, s2, e2) => {
        const { L: c2, U: r2 } = t2;
        const { P: l2, T: i2, N: a2 } = s2;
        const u2 = !c2 && !l2 && (i2.x || i2.y);
        const [f2] = getShowNativeOverlaidScrollbars(e2, s2);
        const readViewportOverflowState = () => {
          const getStatePerAxis = (t4) => {
            const n4 = getStyles(r2, t4);
            const o4 = n4 === E;
            return [n4, o4];
          };
          const [t3, n3] = getStatePerAxis(m);
          const [o3, s3] = getStatePerAxis(O);
          return {
            k: {
              x: t3,
              y: o3
            },
            R: {
              x: n3,
              y: s3
            }
          };
        };
        const _getViewportOverflowHideOffset = (t3) => {
          const { R: n3 } = t3;
          const o3 = l2 || f2 ? 0 : 42;
          const getHideOffsetPerAxis = (t4, n4, s4) => {
            const e4 = t4 ? o3 : s4;
            const c4 = n4 && !l2 ? e4 : 0;
            const r4 = t4 && !!o3;
            return [c4, r4];
          };
          const [s3, e3] = getHideOffsetPerAxis(i2.x, n3.x, a2.x);
          const [c3, r3] = getHideOffsetPerAxis(i2.y, n3.y, a2.y);
          return {
            q: {
              x: s3,
              y: c3
            },
            B: {
              x: e3,
              y: r3
            }
          };
        };
        const _hideNativeScrollbars = (t3, { F: o3 }, s3) => {
          if (!c2) {
            const e3 = assignDeep({}, {
              [y]: 0,
              [S]: 0,
              [w]: 0
            });
            const { q: c3, B: r3 } = _getViewportOverflowHideOffset(t3);
            const { x: l3, y: i3 } = r3;
            const { x: a3, y: u3 } = c3;
            const { j: f3 } = n2;
            const _2 = o3 ? w : y;
            const d2 = o3 ? g : h;
            const p2 = f3[_2];
            const v2 = f3[S];
            const m2 = f3[d2];
            const O2 = f3[b];
            e3[$] = `calc(100% + ${u3 + p2 * -1}px)`;
            e3[_2] = -u3 + p2;
            e3[S] = -a3 + v2;
            if (s3) {
              e3[d2] = m2 + (i3 ? u3 : 0);
              e3[b] = O2 + (l3 ? a3 : 0);
            }
            return e3;
          }
        };
        const _arrangeViewport = (t3, s3, e3) => {
          if (u2) {
            const { j: c3 } = n2;
            const { q: l3, B: i3 } = _getViewportOverflowHideOffset(t3);
            const { x: a3, y: u3 } = i3;
            const { x: f3, y: _2 } = l3;
            const { F: d2 } = o2;
            const p2 = d2 ? h : g;
            const v2 = c3[p2];
            const b2 = c3.paddingTop;
            const w2 = s3.w + e3.w;
            const y2 = s3.h + e3.h;
            const S2 = {
              w: _2 && u3 ? `${_2 + w2 - v2}px` : "",
              h: f3 && a3 ? `${f3 + y2 - b2}px` : ""
            };
            setStyles(r2, {
              "--os-vaw": S2.w,
              "--os-vah": S2.h
            });
          }
          return u2;
        };
        const _undoViewportArrange = (t3) => {
          if (u2) {
            const s3 = t3 || readViewportOverflowState();
            const { j: e3 } = n2;
            const { B: c3 } = _getViewportOverflowHideOffset(s3);
            const { x: l3, y: i3 } = c3;
            const a3 = {};
            const assignProps = (t4) => each(t4, (t5) => {
              a3[t5] = e3[t5];
            });
            if (l3) {
              assignProps([S, v, b]);
            }
            if (i3) {
              assignProps([w, y, g, h]);
            }
            const f3 = getStyles(r2, keys(a3));
            const _2 = removeAttrClass(r2, j, W);
            setStyles(r2, a3);
            return [() => {
              setStyles(r2, assignDeep({}, f3, _hideNativeScrollbars(s3, o2, u2)));
              _2();
            }, s3];
          }
          return [noop];
        };
        return {
          X: _getViewportOverflowHideOffset,
          Y: _arrangeViewport,
          W: _undoViewportArrange,
          J: _hideNativeScrollbars
        };
      }
    })
  }
}))();
var Et = "__osClickScrollPlugin";
var zt = (() => ({
  [Et]: {
    static: () => (t2, n2, o2, s2) => {
      let e2 = false;
      let c2 = noop;
      const r2 = 133;
      const l2 = 222;
      const [i2, a2] = selfClearTimeout(r2);
      const u2 = Math.sign(n2);
      const f2 = o2 * u2;
      const _2 = f2 / 2;
      const easing = (t3) => 1 - (1 - t3) * (1 - t3);
      const easedEndPressAnimation = (n3, o3) => animateNumber(n3, o3, l2, t2, easing);
      const linearPressAnimation = (o3, s3) => animateNumber(o3, n2 - f2, r2 * s3, (o4, s4, e3) => {
        t2(o4);
        if (e3) {
          c2 = easedEndPressAnimation(o4, n2);
        }
      });
      const d2 = animateNumber(0, f2, l2, (r3, l3, a3) => {
        t2(r3);
        if (a3) {
          s2(e2);
          if (!e2) {
            const t3 = n2 - r3;
            const s3 = Math.sign(t3 - _2) === u2;
            if (s3) {
              i2(() => {
                const s4 = t3 - f2;
                const e3 = Math.sign(s4) === u2;
                c2 = e3 ? linearPressAnimation(r3, Math.abs(s4) / o2) : easedEndPressAnimation(r3, n2);
              });
            }
          }
        }
      }, easing);
      return (t3) => {
        e2 = true;
        if (t3) {
          d2();
        }
        a2();
        c2();
      };
    }
  }
}))();
var opsStringify = (t2) => JSON.stringify(t2, (t3, n2) => {
  if (isFunction(n2)) {
    throw 0;
  }
  return n2;
});
var getPropByPath = (t2, n2) => t2 ? `${n2}`.split(".").reduce((t3, n3) => t3 && hasOwnProperty(t3, n3) ? t3[n3] : void 0, t2) : void 0;
var It = {
  paddingAbsolute: false,
  showNativeOverlaidScrollbars: false,
  update: {
    elementEvents: [["img", "load"]],
    debounce: [0, 33],
    attributes: null,
    ignoreMutation: null
  },
  overflow: {
    x: "scroll",
    y: "scroll"
  },
  scrollbars: {
    theme: "os-theme-dark",
    visibility: "auto",
    autoHide: "never",
    autoHideDelay: 1300,
    autoHideSuspend: false,
    dragScroll: true,
    clickScroll: false,
    pointers: ["mouse", "touch", "pen"]
  }
};
var getOptionsDiff = (t2, n2) => {
  const o2 = {};
  const s2 = concat(keys(n2), keys(t2));
  each(s2, (s3) => {
    const e2 = t2[s3];
    const c2 = n2[s3];
    if (isObject(e2) && isObject(c2)) {
      assignDeep(o2[s3] = {}, getOptionsDiff(e2, c2));
      if (isEmptyObject(o2[s3])) {
        delete o2[s3];
      }
    } else if (hasOwnProperty(n2, s3) && c2 !== e2) {
      let t3 = true;
      if (isArray(e2) || isArray(c2)) {
        try {
          if (opsStringify(e2) === opsStringify(c2)) {
            t3 = false;
          }
        } catch (r2) {
        }
      }
      if (t3) {
        o2[s3] = c2;
      }
    }
  });
  return o2;
};
var createOptionCheck = (t2, n2, o2) => (s2) => [getPropByPath(t2, s2), o2 || getPropByPath(n2, s2) !== void 0];
var At;
var getNonce = () => At;
var setNonce = (t2) => {
  At = t2;
};
var Dt;
var createEnvironment = () => {
  const getNativeScrollbarSize = (t3, n2, o3) => {
    appendChildren(document.body, t3);
    appendChildren(document.body, t3);
    const s3 = D(t3);
    const e3 = A(t3);
    const c3 = getFractionalSize(n2);
    if (o3) {
      removeElements(t3);
    }
    return {
      x: e3.h - s3.h + c3.h,
      y: e3.w - s3.w + c3.w
    };
  };
  const getNativeScrollbarsHiding = (t3) => {
    let n2 = false;
    const o3 = addClass(t3, U);
    try {
      n2 = getStyles(t3, "scrollbar-width") === "none" || getStyles(t3, "display", "::-webkit-scrollbar") === "none";
    } catch (s3) {
    }
    o3();
    return n2;
  };
  const t2 = `.${L}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${L} div{width:200%;height:200%;margin:10px 0}.${U}{scrollbar-width:none!important}.${U}::-webkit-scrollbar,.${U}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;
  const o2 = createDOM(`<div class="${L}"><div></div><style>${t2}</style></div>`);
  const s2 = o2[0];
  const e2 = s2.firstChild;
  const c2 = s2.lastChild;
  const r2 = getNonce();
  if (r2) {
    c2.nonce = r2;
  }
  const [l2, , i2] = createEventListenerHub();
  const [a2, u2] = createCache({
    o: getNativeScrollbarSize(s2, e2),
    i: equalXY
  }, bind(getNativeScrollbarSize, s2, e2, true));
  const [f2] = u2();
  const _2 = getNativeScrollbarsHiding(s2);
  const d2 = {
    x: f2.x === 0,
    y: f2.y === 0
  };
  const v2 = {
    elements: {
      host: null,
      padding: !_2,
      viewport: (t3) => _2 && isBodyElement(t3) && t3,
      content: false
    },
    scrollbars: {
      slot: true
    },
    cancel: {
      nativeScrollbarsOverlaid: false,
      body: null
    }
  };
  const h2 = assignDeep({}, It);
  const g2 = bind(assignDeep, {}, h2);
  const b2 = bind(assignDeep, {}, v2);
  const w2 = {
    N: f2,
    T: d2,
    P: _2,
    G: !!p,
    K: bind(l2, "r"),
    Z: b2,
    tt: (t3) => assignDeep(v2, t3) && b2(),
    nt: g2,
    ot: (t3) => assignDeep(h2, t3) && g2(),
    st: assignDeep({}, v2),
    et: assignDeep({}, h2)
  };
  removeAttrs(s2, "style");
  removeElements(s2);
  addEventListener(n, "resize", () => {
    i2("r", []);
  });
  if (isFunction(n.matchMedia) && !_2 && (!d2.x || !d2.y)) {
    const addZoomListener = (t3) => {
      const o3 = n.matchMedia(`(resolution: ${n.devicePixelRatio}dppx)`);
      addEventListener(o3, "change", () => {
        t3();
        addZoomListener(t3);
      }, {
        A: true
      });
    };
    addZoomListener(() => {
      const [t3, n2] = a2();
      assignDeep(w2.N, t3);
      i2("r", [n2]);
    });
  }
  return w2;
};
var getEnvironment = () => {
  if (!Dt) {
    Dt = createEnvironment();
  }
  return Dt;
};
var createEventContentChange = (t2, n2, o2) => {
  let s2 = false;
  const e2 = o2 ? /* @__PURE__ */ new WeakMap() : false;
  const destroy = () => {
    s2 = true;
  };
  const updateElements = (c2) => {
    if (e2 && o2) {
      const r2 = o2.map((n3) => {
        const [o3, s3] = n3 || [];
        const e3 = s3 && o3 ? (c2 || find)(o3, t2) : [];
        return [e3, s3];
      });
      each(r2, (o3) => each(o3[0], (c3) => {
        const r3 = o3[1];
        const l2 = e2.get(c3) || [];
        const i2 = t2.contains(c3);
        if (i2 && r3) {
          const t3 = addEventListener(c3, r3, (o4) => {
            if (s2) {
              t3();
              e2.delete(c3);
            } else {
              n2(o4);
            }
          });
          e2.set(c3, push(l2, t3));
        } else {
          runEachAndClear(l2);
          e2.delete(c3);
        }
      }));
    }
  };
  updateElements();
  return [destroy, updateElements];
};
var createDOMObserver = (t2, n2, o2, s2) => {
  let e2 = false;
  const { ct: c2, rt: r2, lt: l2, it: i2, ut: a2, ft: u2 } = s2 || {};
  const _2 = debounce(() => e2 && o2(true), {
    _: 33,
    p: 99
  });
  const [d2, p2] = createEventContentChange(t2, _2, l2);
  const v2 = c2 || [];
  const h2 = r2 || [];
  const g2 = concat(v2, h2);
  const observerCallback = (e3, c3) => {
    if (!isEmptyArray(c3)) {
      const r3 = a2 || noop;
      const l3 = u2 || noop;
      const f2 = [];
      const _3 = [];
      let d3 = false;
      let v3 = false;
      each(c3, (o3) => {
        const { attributeName: e4, target: c4, type: a3, oldValue: u3, addedNodes: p3, removedNodes: g3 } = o3;
        const b3 = a3 === "attributes";
        const w2 = a3 === "childList";
        const y2 = t2 === c4;
        const S2 = b3 && e4;
        const m2 = S2 && getAttr(c4, e4 || "");
        const O2 = isString(m2) ? m2 : null;
        const $2 = S2 && u3 !== O2;
        const C2 = inArray(h2, e4) && $2;
        if (n2 && (w2 || !y2)) {
          const n3 = b3 && $2;
          const a4 = n3 && i2 && is(c4, i2);
          const _4 = a4 ? !r3(c4, e4, u3, O2) : !b3 || n3;
          const d4 = _4 && !l3(o3, !!a4, t2, s2);
          each(p3, (t3) => push(f2, t3));
          each(g3, (t3) => push(f2, t3));
          v3 = v3 || d4;
        }
        if (!n2 && y2 && $2 && !r3(c4, e4, u3, O2)) {
          push(_3, e4);
          d3 = d3 || C2;
        }
      });
      p2((t3) => deduplicateArray(f2).reduce((n3, o3) => {
        push(n3, find(t3, o3));
        return is(o3, t3) ? push(n3, o3) : n3;
      }, []));
      if (n2) {
        if (!e3 && v3) {
          o2(false);
        }
        return [false];
      }
      if (!isEmptyArray(_3) || d3) {
        const t3 = [deduplicateArray(_3), d3];
        if (!e3) {
          o2.apply(0, t3);
        }
        return t3;
      }
    }
  };
  const b2 = new f(bind(observerCallback, false));
  return [() => {
    b2.observe(t2, {
      attributes: true,
      attributeOldValue: true,
      attributeFilter: g2,
      subtree: n2,
      childList: n2,
      characterData: n2
    });
    e2 = true;
    return () => {
      if (e2) {
        d2();
        b2.disconnect();
        e2 = false;
      }
    };
  }, () => {
    if (e2) {
      _2.m();
      return observerCallback(true, b2.takeRecords());
    }
  }];
};
var Mt = null;
var createSizeObserver = (t2, n2, o2) => {
  const { _t: s2 } = o2 || {};
  const e2 = getStaticPluginModuleInstance($t);
  const [c2] = createCache({
    o: false,
    u: true
  });
  return () => {
    const o3 = [];
    const r2 = createDOM(`<div class="${nt}"><div class="${st}"></div></div>`);
    const l2 = r2[0];
    const i2 = l2.firstChild;
    const onSizeChangedCallbackProxy = (t3) => {
      const o4 = t3 instanceof ResizeObserverEntry;
      let s3 = false;
      let e3 = false;
      if (o4) {
        const [n3, , o5] = c2(t3.contentRect);
        const r3 = domRectHasDimensions(n3);
        e3 = domRectAppeared(n3, o5);
        s3 = !e3 && !r3;
      } else {
        e3 = t3 === true;
      }
      if (!s3) {
        n2({
          dt: true,
          _t: e3
        });
      }
    };
    if (d) {
      if (!isBoolean(Mt)) {
        const n4 = new d(noop);
        n4.observe(t2, {
          get box() {
            Mt = true;
          }
        });
        Mt = Mt || false;
        n4.disconnect();
      }
      const n3 = debounce(onSizeChangedCallbackProxy, {
        _: 0,
        p: 0
      });
      const resizeObserverCallback = (t3) => n3(t3.pop());
      const s3 = new d(resizeObserverCallback);
      s3.observe(Mt ? t2 : i2);
      push(o3, [() => s3.disconnect(), !Mt && appendChildren(t2, l2)]);
      if (Mt) {
        const n4 = new d(resizeObserverCallback);
        n4.observe(t2, {
          box: "border-box"
        });
        push(o3, () => n4.disconnect());
      }
    } else if (e2) {
      const [n3, c3] = e2(i2, onSizeChangedCallbackProxy, s2);
      push(o3, concat([addClass(l2, ot), addEventListener(l2, "animationstart", n3), appendChildren(t2, l2)], c3));
    } else {
      return noop;
    }
    return bind(runEachAndClear, o3);
  };
};
var createTrinsicObserver = (t2, n2) => {
  let o2;
  const isHeightIntrinsic = (t3) => t3.h === 0 || t3.isIntersecting || t3.intersectionRatio > 0;
  const s2 = createDiv(lt);
  const [e2] = createCache({
    o: false
  });
  const triggerOnTrinsicChangedCallback = (t3, o3) => {
    if (t3) {
      const s3 = e2(isHeightIntrinsic(t3));
      const [, c2] = s3;
      return c2 && !o3 && n2(s3) && [s3];
    }
  };
  const intersectionObserverCallback = (t3, n3) => triggerOnTrinsicChangedCallback(n3.pop(), t3);
  return [() => {
    const n3 = [];
    if (_) {
      o2 = new _(bind(intersectionObserverCallback, false), {
        root: t2
      });
      o2.observe(s2);
      push(n3, () => {
        o2.disconnect();
      });
    } else {
      const onSizeChanged = () => {
        const t3 = A(s2);
        triggerOnTrinsicChangedCallback(t3);
      };
      push(n3, createSizeObserver(s2, onSizeChanged)());
      onSizeChanged();
    }
    return bind(runEachAndClear, push(n3, appendChildren(t2, s2)));
  }, () => o2 && intersectionObserverCallback(true, o2.takeRecords())];
};
var createObserversSetup = (t2, n2, o2, s2) => {
  let e2;
  let c2;
  let r2;
  let l2;
  let i2;
  let a2;
  const u2 = `[${B}]`;
  const f2 = `[${j}]`;
  const _2 = ["id", "class", "style", "open", "wrap", "cols", "rows"];
  const { vt: p2, ht: v2, U: h2, gt: g2, bt: b2, L: w2, wt: y2, yt: S2, St: m2, Ot: O2 } = t2;
  const getDirectionIsRTL = (t3) => getStyles(t3, "direction") === "rtl";
  const $2 = {
    $t: false,
    F: getDirectionIsRTL(p2)
  };
  const C2 = getEnvironment();
  const x2 = getStaticPluginModuleInstance(xt);
  const [H2] = createCache({
    i: equalWH,
    o: {
      w: 0,
      h: 0
    }
  }, () => {
    const s3 = x2 && x2.V(t2, n2, $2, C2, o2).W;
    const e3 = y2 && w2;
    const c3 = !e3 && hasAttrClass(v2, B, N);
    const r3 = !w2 && S2(W);
    const l3 = r3 && getElementScroll(g2);
    const i3 = l3 && O2();
    const a3 = m2(J, c3);
    const u3 = r3 && s3 && s3()[0];
    const f3 = M(h2);
    const _3 = getFractionalSize(h2);
    if (u3) {
      u3();
    }
    scrollElementTo(g2, l3);
    if (i3) {
      i3();
    }
    if (c3) {
      a3();
    }
    return {
      w: f3.w + _3.w,
      h: f3.h + _3.h
    };
  });
  const E2 = debounce(s2, {
    _: () => e2,
    p: () => c2,
    S(t3, n3) {
      const [o3] = t3;
      const [s3] = n3;
      return [concat(keys(o3), keys(s3)).reduce((t4, n4) => {
        t4[n4] = o3[n4] || s3[n4];
        return t4;
      }, {})];
    }
  });
  const setDirection = (t3) => {
    const n3 = getDirectionIsRTL(p2);
    assignDeep(t3, {
      Ct: a2 !== n3
    });
    assignDeep($2, {
      F: n3
    });
    a2 = n3;
  };
  const onTrinsicChanged = (t3, n3) => {
    const [o3, e3] = t3;
    const c3 = {
      xt: e3
    };
    assignDeep($2, {
      $t: o3
    });
    if (!n3) {
      s2(c3);
    }
    return c3;
  };
  const onSizeChanged = ({ dt: t3, _t: n3 }) => {
    const o3 = t3 && !n3;
    const e3 = !o3 && C2.P ? E2 : s2;
    const c3 = {
      dt: t3 || n3,
      _t: n3
    };
    setDirection(c3);
    e3(c3);
  };
  const onContentMutation = (t3, n3) => {
    const [, o3] = H2();
    const e3 = {
      Ht: o3
    };
    setDirection(e3);
    const c3 = t3 ? s2 : E2;
    if (o3 && !n3) {
      c3(e3);
    }
    return e3;
  };
  const onHostMutation = (t3, n3, o3) => {
    const s3 = {
      Et: n3
    };
    setDirection(s3);
    if (n3 && !o3) {
      E2(s3);
    }
    return s3;
  };
  const [z2, I2] = b2 ? createTrinsicObserver(v2, onTrinsicChanged) : [];
  const A2 = !w2 && createSizeObserver(v2, onSizeChanged, {
    _t: true
  });
  const [D2, T2] = createDOMObserver(v2, false, onHostMutation, {
    rt: _2,
    ct: _2
  });
  const k2 = w2 && d && new d((t3) => {
    const n3 = t3[t3.length - 1].contentRect;
    onSizeChanged({
      dt: true,
      _t: domRectAppeared(n3, i2)
    });
    i2 = n3;
  });
  const R2 = debounce(() => {
    const [, t3] = H2();
    s2({
      Ht: t3
    });
  }, {
    _: 222,
    v: true
  });
  return [() => {
    if (k2) {
      k2.observe(v2);
    }
    const t3 = A2 && A2();
    const n3 = z2 && z2();
    const o3 = D2();
    const s3 = C2.K((t4) => {
      if (t4) {
        E2({
          zt: t4
        });
      } else {
        R2();
      }
    });
    return () => {
      if (k2) {
        k2.disconnect();
      }
      if (t3) {
        t3();
      }
      if (n3) {
        n3();
      }
      if (l2) {
        l2();
      }
      o3();
      s3();
    };
  }, ({ It: t3, At: n3, Dt: o3 }) => {
    const s3 = {};
    const [i3] = t3("update.ignoreMutation");
    const [a3, d2] = t3("update.attributes");
    const [p3, v3] = t3("update.elementEvents");
    const [g3, y3] = t3("update.debounce");
    const S3 = v3 || d2;
    const m3 = n3 || o3;
    const ignoreMutationFromOptions = (t4) => isFunction(i3) && i3(t4);
    if (S3) {
      if (r2) {
        r2();
      }
      if (l2) {
        l2();
      }
      const [t4, n4] = createDOMObserver(b2 || h2, true, onContentMutation, {
        ct: concat(_2, a3 || []),
        lt: p3,
        it: u2,
        ft: (t5, n5) => {
          const { target: o4, attributeName: s4 } = t5;
          const e3 = !n5 && s4 && !w2 ? liesBetween(o4, u2, f2) : false;
          return e3 || !!closest(o4, `.${at}`) || !!ignoreMutationFromOptions(t5);
        }
      });
      l2 = t4();
      r2 = n4;
    }
    if (y3) {
      E2.m();
      if (isArray(g3)) {
        const t4 = g3[0];
        const n4 = g3[1];
        e2 = isNumber(t4) && t4;
        c2 = isNumber(n4) && n4;
      } else if (isNumber(g3)) {
        e2 = g3;
        c2 = false;
      } else {
        e2 = false;
        c2 = false;
      }
    }
    if (m3) {
      const t4 = T2();
      const n4 = I2 && I2();
      const o4 = r2 && r2();
      if (t4) {
        assignDeep(s3, onHostMutation(t4[0], t4[1], m3));
      }
      if (n4) {
        assignDeep(s3, onTrinsicChanged(n4[0], m3));
      }
      if (o4) {
        assignDeep(s3, onContentMutation(o4[0], m3));
      }
    }
    setDirection(s3);
    return s3;
  }, $2];
};
var resolveInitialization = (t2, n2) => isFunction(n2) ? n2.apply(0, t2) : n2;
var staticInitializationElement = (t2, n2, o2, s2) => {
  const e2 = isUndefined(s2) ? o2 : s2;
  const c2 = resolveInitialization(t2, e2);
  return c2 || n2.apply(0, t2);
};
var dynamicInitializationElement = (t2, n2, o2, s2) => {
  const e2 = isUndefined(s2) ? o2 : s2;
  const c2 = resolveInitialization(t2, e2);
  return !!c2 && (isHTMLElement(c2) ? c2 : n2.apply(0, t2));
};
var cancelInitialization = (t2, n2) => {
  const { nativeScrollbarsOverlaid: o2, body: s2 } = n2 || {};
  const { T: e2, P: c2, Z: r2 } = getEnvironment();
  const { nativeScrollbarsOverlaid: l2, body: i2 } = r2().cancel;
  const a2 = o2 != null ? o2 : l2;
  const u2 = isUndefined(s2) ? i2 : s2;
  const f2 = (e2.x || e2.y) && a2;
  const _2 = t2 && (isNull(u2) ? !c2 : u2);
  return !!f2 || !!_2;
};
var createScrollbarsSetupElements = (t2, n2, o2, s2) => {
  const e2 = "--os-viewport-percent";
  const c2 = "--os-scroll-percent";
  const r2 = "--os-scroll-direction";
  const { Z: l2 } = getEnvironment();
  const { scrollbars: i2 } = l2();
  const { slot: a2 } = i2;
  const { vt: u2, ht: f2, U: _2, Mt: d2, gt: v2, wt: h2, L: g2 } = n2;
  const { scrollbars: b2 } = d2 ? {} : t2;
  const { slot: w2 } = b2 || {};
  const y2 = [];
  const S2 = [];
  const m2 = [];
  const O2 = dynamicInitializationElement([u2, f2, _2], () => g2 && h2 ? u2 : f2, a2, w2);
  const initScrollTimeline = (t3) => {
    if (p) {
      let n3 = null;
      let s3 = [];
      const e3 = new p({
        source: v2,
        axis: t3
      });
      const cancelAnimation = () => {
        if (n3) {
          n3.cancel();
        }
        n3 = null;
      };
      const _setScrollPercentAnimation = (c3) => {
        const { Tt: r3 } = o2;
        const l3 = isDefaultDirectionScrollCoordinates(r3)[t3];
        const i3 = t3 === "x";
        const a3 = [getTrasformTranslateValue(0, i3), getTrasformTranslateValue(`calc(100cq${i3 ? "w" : "h"} + -100%)`, i3)];
        const u3 = l3 ? a3 : a3.reverse();
        if (s3[0] === u3[0] && s3[1] === u3[1]) {
          return cancelAnimation;
        }
        cancelAnimation();
        s3 = u3;
        n3 = c3.kt.animate({
          clear: ["left"],
          transform: u3
        }, {
          timeline: e3
        });
        return cancelAnimation;
      };
      return {
        Rt: _setScrollPercentAnimation
      };
    }
  };
  const $2 = {
    x: initScrollTimeline("x"),
    y: initScrollTimeline("y")
  };
  const getViewportPercent = () => {
    const { Vt: t3, Lt: n3 } = o2;
    const getAxisValue = (t4, n4) => capNumber(0, 1, t4 / (t4 + n4) || 0);
    return {
      x: getAxisValue(n3.x, t3.x),
      y: getAxisValue(n3.y, t3.y)
    };
  };
  const scrollbarStructureAddRemoveClass = (t3, n3, o3) => {
    const s3 = o3 ? addClass : removeClass;
    each(t3, (t4) => {
      s3(t4.Ut, n3);
    });
  };
  const scrollbarStyle = (t3, n3) => {
    each(t3, (t4) => {
      const [o3, s3] = n3(t4);
      setStyles(o3, s3);
    });
  };
  const scrollbarsAddRemoveClass = (t3, n3, o3) => {
    const s3 = isBoolean(o3);
    const e3 = s3 ? o3 : true;
    const c3 = s3 ? !o3 : true;
    if (e3) {
      scrollbarStructureAddRemoveClass(S2, t3, n3);
    }
    if (c3) {
      scrollbarStructureAddRemoveClass(m2, t3, n3);
    }
  };
  const refreshScrollbarsHandleLength = () => {
    const t3 = getViewportPercent();
    const createScrollbarStyleFn = (t4) => (n3) => [n3.Ut, {
      [e2]: roundCssNumber(t4) + ""
    }];
    scrollbarStyle(S2, createScrollbarStyleFn(t3.x));
    scrollbarStyle(m2, createScrollbarStyleFn(t3.y));
  };
  const refreshScrollbarsHandleOffset = () => {
    if (!p) {
      const { Tt: t3 } = o2;
      const n3 = getScrollCoordinatesPercent(t3, getElementScroll(v2));
      const createScrollbarStyleFn = (t4) => (n4) => [n4.Ut, {
        [c2]: roundCssNumber(t4) + ""
      }];
      scrollbarStyle(S2, createScrollbarStyleFn(n3.x));
      scrollbarStyle(m2, createScrollbarStyleFn(n3.y));
    }
  };
  const refreshScrollbarsScrollCoordinates = () => {
    const { Tt: t3 } = o2;
    const n3 = isDefaultDirectionScrollCoordinates(t3);
    const createScrollbarStyleFn = (t4) => (n4) => [n4.Ut, {
      [r2]: t4 ? "0" : "1"
    }];
    scrollbarStyle(S2, createScrollbarStyleFn(n3.x));
    scrollbarStyle(m2, createScrollbarStyleFn(n3.y));
    if (p) {
      S2.forEach($2.x.Rt);
      m2.forEach($2.y.Rt);
    }
  };
  const refreshScrollbarsScrollbarOffset = () => {
    if (g2 && !h2) {
      const { Vt: t3, Tt: n3 } = o2;
      const s3 = isDefaultDirectionScrollCoordinates(n3);
      const e3 = getScrollCoordinatesPercent(n3, getElementScroll(v2));
      const styleScrollbarPosition = (n4) => {
        const { Ut: o3 } = n4;
        const c3 = parent(o3) === _2 && o3;
        const getTranslateValue = (t4, n5, o4) => {
          const s4 = n5 * t4;
          return numberToCssPx(o4 ? s4 : -s4);
        };
        return [c3, c3 && {
          transform: getTrasformTranslateValue({
            x: getTranslateValue(e3.x, t3.x, s3.x),
            y: getTranslateValue(e3.y, t3.y, s3.y)
          })
        }];
      };
      scrollbarStyle(S2, styleScrollbarPosition);
      scrollbarStyle(m2, styleScrollbarPosition);
    }
  };
  const generateScrollbarDOM = (t3) => {
    const n3 = t3 ? "x" : "y";
    const o3 = t3 ? ft : _t;
    const e3 = createDiv(`${at} ${o3}`);
    const c3 = createDiv(dt);
    const r3 = createDiv(pt);
    const l3 = {
      Ut: e3,
      Pt: c3,
      kt: r3
    };
    const i3 = $2[n3];
    push(t3 ? S2 : m2, l3);
    push(y2, [appendChildren(e3, c3), appendChildren(c3, r3), bind(removeElements, e3), i3 && i3.Rt(l3), s2(l3, scrollbarsAddRemoveClass, t3)]);
    return l3;
  };
  const C2 = bind(generateScrollbarDOM, true);
  const x2 = bind(generateScrollbarDOM, false);
  const appendElements = () => {
    appendChildren(O2, S2[0].Ut);
    appendChildren(O2, m2[0].Ut);
    return bind(runEachAndClear, y2);
  };
  C2();
  x2();
  return [{
    Nt: refreshScrollbarsHandleLength,
    qt: refreshScrollbarsHandleOffset,
    Bt: refreshScrollbarsScrollCoordinates,
    Ft: refreshScrollbarsScrollbarOffset,
    jt: scrollbarsAddRemoveClass,
    Xt: {
      Yt: S2,
      Wt: C2,
      Jt: bind(scrollbarStyle, S2)
    },
    Gt: {
      Yt: m2,
      Wt: x2,
      Jt: bind(scrollbarStyle, m2)
    }
  }, appendElements];
};
var createScrollbarsSetupEvents = (t2, n2, o2, s2) => (r2, l2, i2) => {
  const { ht: u2, U: f2, L: _2, gt: d2, Kt: p2, Ot: v2 } = n2;
  const { Ut: h2, Pt: g2, kt: b2 } = r2;
  const [w2, y2] = selfClearTimeout(333);
  const [S2, m2] = selfClearTimeout(444);
  const scrollOffsetElementScrollBy = (t3) => {
    if (isFunction(d2.scrollBy)) {
      d2.scrollBy({
        behavior: "smooth",
        left: t3.x,
        top: t3.y
      });
    }
  };
  const createInteractiveScrollEvents = () => {
    const n3 = "pointerup pointercancel lostpointercapture";
    const s3 = `client${i2 ? "X" : "Y"}`;
    const r3 = i2 ? $ : C;
    const l3 = i2 ? "left" : "top";
    const a2 = i2 ? "w" : "h";
    const u3 = i2 ? "x" : "y";
    const createRelativeHandleMove = (t3, n4) => (s4) => {
      const { Vt: e2 } = o2;
      const c2 = A(g2)[a2] - A(b2)[a2];
      const r4 = n4 * s4 / c2;
      const l4 = r4 * e2[u3];
      scrollElementTo(d2, {
        [u3]: t3 + l4
      });
    };
    const f3 = [];
    return addEventListener(g2, "pointerdown", (o3) => {
      const i3 = closest(o3.target, `.${pt}`) === b2;
      const _3 = i3 ? b2 : g2;
      const h3 = t2.scrollbars;
      const w3 = h3[i3 ? "dragScroll" : "clickScroll"];
      const { button: y3, isPrimary: O3, pointerType: $2 } = o3;
      const { pointers: C2 } = h3;
      const x2 = y3 === 0 && O3 && w3 && (C2 || []).includes($2);
      if (x2) {
        runEachAndClear(f3);
        m2();
        const t3 = !i3 && (o3.shiftKey || w3 === "instant");
        const h4 = bind(getBoundingClientRect, b2);
        const y4 = bind(getBoundingClientRect, g2);
        const getHandleOffset = (t4, n4) => (t4 || h4())[l3] - (n4 || y4())[l3];
        const O4 = e(getBoundingClientRect(d2)[r3]) / A(d2)[a2] || 1;
        const $3 = createRelativeHandleMove(getElementScroll(d2)[u3], 1 / O4);
        const C3 = o3[s3];
        const x3 = h4();
        const H2 = y4();
        const E2 = x3[r3];
        const z2 = getHandleOffset(x3, H2) + E2 / 2;
        const I2 = C3 - H2[l3];
        const D2 = i3 ? 0 : I2 - z2;
        const releasePointerCapture = (t4) => {
          runEachAndClear(k2);
          _3.releasePointerCapture(t4.pointerId);
        };
        const M2 = i3 || t3;
        const T2 = v2();
        const k2 = [addEventListener(p2, n3, releasePointerCapture), addEventListener(p2, "selectstart", (t4) => preventDefault(t4), {
          H: false
        }), addEventListener(g2, n3, releasePointerCapture), M2 && addEventListener(g2, "pointermove", (t4) => $3(D2 + (t4[s3] - C3))), M2 && (() => {
          const t4 = getElementScroll(d2);
          T2();
          const n4 = getElementScroll(d2);
          const o4 = {
            x: n4.x - t4.x,
            y: n4.y - t4.y
          };
          if (c(o4.x) > 3 || c(o4.y) > 3) {
            v2();
            scrollElementTo(d2, t4);
            scrollOffsetElementScrollBy(o4);
            S2(T2);
          }
        })];
        _3.setPointerCapture(o3.pointerId);
        if (t3) {
          $3(D2);
        } else if (!i3) {
          const t4 = getStaticPluginModuleInstance(Et);
          if (t4) {
            const n4 = t4($3, D2, E2, (t5) => {
              if (t5) {
                T2();
              } else {
                push(k2, T2);
              }
            });
            push(k2, n4);
            push(f3, bind(n4, true));
          }
        }
      }
    });
  };
  let O2 = true;
  return bind(runEachAndClear, [addEventListener(b2, "pointermove pointerleave", s2), addEventListener(h2, "pointerenter", () => {
    l2(gt, true);
  }), addEventListener(h2, "pointerleave pointercancel", () => {
    l2(gt, false);
  }), !_2 && addEventListener(h2, "mousedown", () => {
    const t3 = getFocusedElement();
    if (hasAttr(t3, j) || hasAttr(t3, B) || t3 === document.body) {
      a(bind(focusElement, f2), 25);
    }
  }), addEventListener(h2, "wheel", (t3) => {
    const { deltaX: n3, deltaY: o3, deltaMode: s3 } = t3;
    if (O2 && s3 === 0 && parent(h2) === u2) {
      scrollOffsetElementScrollBy({
        x: n3,
        y: o3
      });
    }
    O2 = false;
    l2(St, true);
    w2(() => {
      O2 = true;
      l2(St);
    });
    preventDefault(t3);
  }, {
    H: false,
    I: true
  }), addEventListener(h2, "pointerdown", bind(addEventListener, p2, "click", stopAndPrevent, {
    A: true,
    I: true,
    H: false
  }), {
    I: true
  }), createInteractiveScrollEvents(), y2, m2]);
};
var createScrollbarsSetup = (t2, n2, o2, s2, e2, c2) => {
  let r2;
  let l2;
  let i2;
  let a2;
  let u2;
  let f2 = noop;
  let _2 = 0;
  const d2 = ["mouse", "pen"];
  const isHoverablePointerType = (t3) => d2.includes(t3.pointerType);
  const [p2, v2] = selfClearTimeout();
  const [h2, g2] = selfClearTimeout(100);
  const [b2, w2] = selfClearTimeout(100);
  const [y2, S2] = selfClearTimeout(() => _2);
  const [m2, O2] = createScrollbarsSetupElements(t2, e2, s2, createScrollbarsSetupEvents(n2, e2, s2, (t3) => isHoverablePointerType(t3) && manageScrollbarsAutoHideInstantInteraction()));
  const { ht: $2, Qt: C2, wt: H2 } = e2;
  const { jt: z2, Nt: I2, qt: A2, Bt: D2, Ft: M2 } = m2;
  const manageScrollbarsAutoHide = (t3, n3) => {
    S2();
    if (t3) {
      z2(yt);
    } else {
      const t4 = bind(z2, yt, true);
      if (_2 > 0 && !n3) {
        y2(t4);
      } else {
        t4();
      }
    }
  };
  const manageScrollbarsAutoHideInstantInteraction = () => {
    if (i2 ? !r2 : !a2) {
      manageScrollbarsAutoHide(true);
      h2(() => {
        manageScrollbarsAutoHide(false);
      });
    }
  };
  const manageAutoHideSuspension = (t3) => {
    z2(wt, t3, true);
    z2(wt, t3, false);
  };
  const onHostMouseEnter = (t3) => {
    if (isHoverablePointerType(t3)) {
      r2 = i2;
      if (i2) {
        manageScrollbarsAutoHide(true);
      }
    }
  };
  const T2 = [S2, g2, w2, v2, () => f2(), addEventListener($2, "pointerover", onHostMouseEnter, {
    A: true
  }), addEventListener($2, "pointerenter", onHostMouseEnter), addEventListener($2, "pointerleave", (t3) => {
    if (isHoverablePointerType(t3)) {
      r2 = false;
      if (i2) {
        manageScrollbarsAutoHide(false);
      }
    }
  }), addEventListener($2, "pointermove", (t3) => {
    if (isHoverablePointerType(t3) && l2) {
      manageScrollbarsAutoHideInstantInteraction();
    }
  }), addEventListener(C2, "scroll", (t3) => {
    p2(() => {
      A2();
      manageScrollbarsAutoHideInstantInteraction();
    });
    c2(t3);
    M2();
  })];
  return [() => bind(runEachAndClear, push(T2, O2())), ({ It: t3, Dt: n3, Zt: e3, tn: c3 }) => {
    const { nn: r3, sn: d3, en: p3, cn: v3 } = c3 || {};
    const { Ct: h3, _t: g3 } = e3 || {};
    const { F: w3 } = o2;
    const { T: y3 } = getEnvironment();
    const { k: S3, rn: m3 } = s2;
    const [O3, $3] = t3("showNativeOverlaidScrollbars");
    const [T3, k2] = t3("scrollbars.theme");
    const [R2, V2] = t3("scrollbars.visibility");
    const [L2, U2] = t3("scrollbars.autoHide");
    const [P2, N2] = t3("scrollbars.autoHideSuspend");
    const [q2] = t3("scrollbars.autoHideDelay");
    const [B2, F2] = t3("scrollbars.dragScroll");
    const [j2, X2] = t3("scrollbars.clickScroll");
    const [Y2, W2] = t3("overflow");
    const J2 = g3 && !n3;
    const G2 = m3.x || m3.y;
    const K2 = r3 || d3 || v3 || h3 || n3;
    const Q2 = p3 || V2 || W2;
    const Z2 = O3 && y3.x && y3.y;
    const setScrollbarVisibility = (t4, n4, o3) => {
      const s3 = t4.includes(E) && (R2 === x || R2 === "auto" && n4 === E);
      z2(vt, s3, o3);
      return s3;
    };
    _2 = q2;
    if (J2) {
      if (P2 && G2) {
        manageAutoHideSuspension(false);
        f2();
        b2(() => {
          f2 = addEventListener(C2, "scroll", bind(manageAutoHideSuspension, true), {
            A: true
          });
        });
      } else {
        manageAutoHideSuspension(true);
      }
    }
    if ($3) {
      z2(it, Z2);
    }
    if (k2) {
      z2(u2);
      z2(T3, true);
      u2 = T3;
    }
    if (N2 && !P2) {
      manageAutoHideSuspension(true);
    }
    if (U2) {
      l2 = L2 === "move";
      i2 = L2 === "leave";
      a2 = L2 === "never";
      manageScrollbarsAutoHide(a2, true);
    }
    if (F2) {
      z2(Ot, B2);
    }
    if (X2) {
      z2(mt, !!j2);
    }
    if (Q2) {
      const t4 = setScrollbarVisibility(Y2.x, S3.x, true);
      const n4 = setScrollbarVisibility(Y2.y, S3.y, false);
      const o3 = t4 && n4;
      z2(ht, !o3);
    }
    if (K2) {
      A2();
      I2();
      M2();
      if (v3) {
        D2();
      }
      z2(bt, !m3.x, true);
      z2(bt, !m3.y, false);
      z2(ut, w3 && !H2);
    }
  }, {}, m2];
};
var createStructureSetupElements = (t2) => {
  const o2 = getEnvironment();
  const { Z: s2, P: e2 } = o2;
  const { elements: c2 } = s2();
  const { padding: r2, viewport: l2, content: i2 } = c2;
  const a2 = isHTMLElement(t2);
  const u2 = a2 ? {} : t2;
  const { elements: f2 } = u2;
  const { padding: _2, viewport: d2, content: p2 } = f2 || {};
  const v2 = a2 ? t2 : u2.target;
  const h2 = isBodyElement(v2);
  const g2 = v2.ownerDocument;
  const b2 = g2.documentElement;
  const getDocumentWindow = () => g2.defaultView || n;
  const w2 = bind(staticInitializationElement, [v2]);
  const y2 = bind(dynamicInitializationElement, [v2]);
  const S2 = bind(createDiv, "");
  const $2 = bind(w2, S2, l2);
  const C2 = bind(y2, S2, i2);
  const elementHasOverflow = (t3) => {
    const n2 = A(t3);
    const o3 = M(t3);
    const s3 = getStyles(t3, m);
    const e3 = getStyles(t3, O);
    return o3.w - n2.w > 0 && !overflowIsVisible(s3) || o3.h - n2.h > 0 && !overflowIsVisible(e3);
  };
  const x2 = $2(d2);
  const H2 = x2 === v2;
  const E2 = H2 && h2;
  const z2 = !H2 && C2(p2);
  const I2 = !H2 && x2 === z2;
  const D2 = E2 ? b2 : x2;
  const T2 = E2 ? D2 : v2;
  const k2 = !H2 && y2(S2, r2, _2);
  const R2 = !I2 && z2;
  const V2 = [R2, D2, k2, T2].map((t3) => isHTMLElement(t3) && !parent(t3) && t3);
  const elementIsGenerated = (t3) => t3 && inArray(V2, t3);
  const L2 = !elementIsGenerated(D2) && elementHasOverflow(D2) ? D2 : v2;
  const U2 = E2 ? b2 : D2;
  const N2 = E2 ? g2 : D2;
  const X2 = {
    vt: v2,
    ht: T2,
    U: D2,
    ln: k2,
    bt: R2,
    gt: U2,
    Qt: N2,
    an: h2 ? b2 : L2,
    Kt: g2,
    wt: h2,
    Mt: a2,
    L: H2,
    un: getDocumentWindow,
    yt: (t3) => hasAttrClass(D2, j, t3),
    St: (t3, n2) => addRemoveAttrClass(D2, j, t3, n2),
    Ot: () => addRemoveAttrClass(U2, j, G, true)
  };
  const { vt: Y2, ht: W2, ln: J2, U: Q2, bt: nt2 } = X2;
  const ot2 = [() => {
    removeAttrs(W2, [B, P]);
    removeAttrs(Y2, P);
    if (h2) {
      removeAttrs(b2, [P, B]);
    }
  }];
  let st2 = contents([nt2, Q2, J2, W2, Y2].find((t3) => t3 && !elementIsGenerated(t3)));
  const et2 = E2 ? Y2 : nt2 || Q2;
  const ct2 = bind(runEachAndClear, ot2);
  const appendElements = () => {
    const t3 = getDocumentWindow();
    const n2 = getFocusedElement();
    const unwrap = (t4) => {
      appendChildren(parent(t4), contents(t4));
      removeElements(t4);
    };
    const prepareWrapUnwrapFocus = (t4) => addEventListener(t4, "focusin focusout focus blur", stopAndPrevent, {
      I: true,
      H: false
    });
    const o3 = "tabindex";
    const s3 = getAttr(Q2, o3);
    const c3 = prepareWrapUnwrapFocus(n2);
    setAttrs(W2, B, H2 ? "" : F);
    setAttrs(J2, Z, "");
    setAttrs(Q2, j, "");
    setAttrs(nt2, tt, "");
    if (!H2) {
      setAttrs(Q2, o3, s3 || "-1");
      if (h2) {
        setAttrs(b2, q, "");
      }
    }
    appendChildren(et2, st2);
    appendChildren(W2, J2);
    appendChildren(J2 || W2, !H2 && Q2);
    appendChildren(Q2, nt2);
    push(ot2, [c3, () => {
      const t4 = getFocusedElement();
      const n3 = elementIsGenerated(Q2);
      const e3 = n3 && t4 === Q2 ? Y2 : t4;
      const c4 = prepareWrapUnwrapFocus(e3);
      removeAttrs(J2, Z);
      removeAttrs(nt2, tt);
      removeAttrs(Q2, j);
      if (h2) {
        removeAttrs(b2, q);
      }
      if (s3) {
        setAttrs(Q2, o3, s3);
      } else {
        removeAttrs(Q2, o3);
      }
      if (elementIsGenerated(nt2)) {
        unwrap(nt2);
      }
      if (n3) {
        unwrap(Q2);
      }
      if (elementIsGenerated(J2)) {
        unwrap(J2);
      }
      focusElement(e3);
      c4();
    }]);
    if (e2 && !H2) {
      addAttrClass(Q2, j, K);
      push(ot2, bind(removeAttrs, Q2, j));
    }
    focusElement(!H2 && h2 && n2 === Y2 && t3.top === t3 ? Q2 : n2);
    c3();
    st2 = 0;
    return ct2;
  };
  return [X2, appendElements, ct2];
};
var createTrinsicUpdateSegment = ({ bt: t2 }) => ({ Zt: n2, fn: o2, Dt: s2 }) => {
  const { xt: e2 } = n2 || {};
  const { $t: c2 } = o2;
  const r2 = t2 && (e2 || s2);
  if (r2) {
    setStyles(t2, {
      [C]: c2 && "100%"
    });
  }
};
var createPaddingUpdateSegment = ({ ht: t2, ln: n2, U: o2, L: s2 }, e2) => {
  const [c2, r2] = createCache({
    i: equalTRBL,
    o: topRightBottomLeft()
  }, bind(topRightBottomLeft, t2, "padding", ""));
  return ({ It: t3, Zt: l2, fn: i2, Dt: a2 }) => {
    let [u2, f2] = r2(a2);
    const { P: _2 } = getEnvironment();
    const { dt: d2, Ht: p2, Ct: m2 } = l2 || {};
    const { F: O2 } = i2;
    const [C2, x2] = t3("paddingAbsolute");
    const H2 = a2 || p2;
    if (d2 || f2 || H2) {
      [u2, f2] = c2(a2);
    }
    const E2 = !s2 && (x2 || m2 || f2);
    if (E2) {
      const t4 = !C2 || !n2 && !_2;
      const s3 = u2.r + u2.l;
      const c3 = u2.t + u2.b;
      const r3 = {
        [y]: t4 && !O2 ? -s3 : 0,
        [S]: t4 ? -c3 : 0,
        [w]: t4 && O2 ? -s3 : 0,
        top: t4 ? -u2.t : 0,
        right: t4 ? O2 ? -u2.r : "auto" : 0,
        left: t4 ? O2 ? "auto" : -u2.l : 0,
        [$]: t4 && `calc(100% + ${s3}px)`
      };
      const l3 = {
        [v]: t4 ? u2.t : 0,
        [h]: t4 ? u2.r : 0,
        [b]: t4 ? u2.b : 0,
        [g]: t4 ? u2.l : 0
      };
      setStyles(n2 || o2, r3);
      setStyles(o2, l3);
      assignDeep(e2, {
        ln: u2,
        _n: !t4,
        j: n2 ? l3 : assignDeep({}, r3, l3)
      });
    }
    return {
      dn: E2
    };
  };
};
var createOverflowUpdateSegment = (t2, s2) => {
  const e2 = getEnvironment();
  const { ht: c2, ln: r2, U: l2, L: a2, Qt: u2, gt: f2, wt: _2, St: d2, un: p2 } = t2;
  const { P: v2 } = e2;
  const h2 = _2 && a2;
  const g2 = bind(o, 0);
  const b2 = {
    display: () => false,
    direction: (t3) => t3 !== "ltr",
    flexDirection: (t3) => t3.endsWith("-reverse"),
    writingMode: (t3) => t3 !== "horizontal-tb"
  };
  const w2 = keys(b2);
  const y2 = {
    i: equalWH,
    o: {
      w: 0,
      h: 0
    }
  };
  const S2 = {
    i: equalXY,
    o: {}
  };
  const setMeasuringMode = (t3) => {
    d2(J, !h2 && t3);
  };
  const getMeasuredScrollCoordinates = (t3) => {
    const n2 = w2.some((n3) => {
      const o3 = t3[n3];
      return o3 && b2[n3](o3);
    });
    if (!n2) {
      return {
        D: {
          x: 0,
          y: 0
        },
        M: {
          x: 1,
          y: 1
        }
      };
    }
    setMeasuringMode(true);
    const o2 = getElementScroll(f2);
    const s3 = d2(Q, true);
    const e3 = addEventListener(u2, E, (t4) => {
      const n3 = getElementScroll(f2);
      if (t4.isTrusted && n3.x === o2.x && n3.y === o2.y) {
        stopPropagation(t4);
      }
    }, {
      I: true,
      A: true
    });
    scrollElementTo(f2, {
      x: 0,
      y: 0
    });
    s3();
    const c3 = getElementScroll(f2);
    const r3 = M(f2);
    scrollElementTo(f2, {
      x: r3.w,
      y: r3.h
    });
    const l3 = getElementScroll(f2);
    scrollElementTo(f2, {
      x: l3.x - c3.x < 1 && -r3.w,
      y: l3.y - c3.y < 1 && -r3.h
    });
    const a3 = getElementScroll(f2);
    scrollElementTo(f2, o2);
    i(() => e3());
    return {
      D: c3,
      M: a3
    };
  };
  const getOverflowAmount = (t3, o2) => {
    const s3 = n.devicePixelRatio % 1 !== 0 ? 1 : 0;
    const e3 = {
      w: g2(t3.w - o2.w),
      h: g2(t3.h - o2.h)
    };
    return {
      w: e3.w > s3 ? e3.w : 0,
      h: e3.h > s3 ? e3.h : 0
    };
  };
  const [m2, O2] = createCache(y2, bind(getFractionalSize, l2));
  const [$2, C2] = createCache(y2, bind(M, l2));
  const [z2, I2] = createCache(y2);
  const [A2] = createCache(S2);
  const [T2, k2] = createCache(y2);
  const [R2] = createCache(S2);
  const [V2] = createCache({
    i: (t3, n2) => equal(t3, n2, w2),
    o: {}
  }, () => hasDimensions(l2) ? getStyles(l2, w2) : {});
  const [L2, U2] = createCache({
    i: (t3, n2) => equalXY(t3.D, n2.D) && equalXY(t3.M, n2.M),
    o: getZeroScrollCoordinates()
  });
  const P2 = getStaticPluginModuleInstance(xt);
  const createViewportOverflowStyleClassName = (t3, n2) => {
    const o2 = n2 ? X : Y;
    return `${o2}${capitalizeFirstLetter(t3)}`;
  };
  const setViewportOverflowStyle = (t3) => {
    const createAllOverflowStyleClassNames = (t4) => [x, H, E].map((n3) => createViewportOverflowStyleClassName(n3, t4));
    const n2 = createAllOverflowStyleClassNames(true).concat(createAllOverflowStyleClassNames()).join(" ");
    d2(n2);
    d2(keys(t3).map((n3) => createViewportOverflowStyleClassName(t3[n3], n3 === "x")).join(" "), true);
  };
  return ({ It: n2, Zt: o2, fn: i2, Dt: a3 }, { dn: u3 }) => {
    const { dt: f3, Ht: _3, Ct: b3, _t: w3, zt: y3 } = o2 || {};
    const S3 = P2 && P2.V(t2, s2, i2, e2, n2);
    const { Y: x2, W: H2, J: E2 } = S3 || {};
    const [M2, q2] = getShowNativeOverlaidScrollbars(n2, e2);
    const [F2, j2] = n2("overflow");
    const X2 = overflowIsVisible(F2.x);
    const Y2 = overflowIsVisible(F2.y);
    const W2 = f3 || u3 || _3 || b3 || y3 || q2;
    let J2 = O2(a3);
    let G2 = C2(a3);
    let Q2 = I2(a3);
    let tt2 = k2(a3);
    if (q2 && v2) {
      d2(K, !M2);
    }
    if (W2) {
      if (hasAttrClass(c2, B, N)) {
        setMeasuringMode(true);
      }
      const [t3] = H2 ? H2() : [];
      const [n3] = J2 = m2(a3);
      const [o3] = G2 = $2(a3);
      const s3 = D(l2);
      const e3 = h2 && getWindowSize(p2());
      const r3 = {
        w: g2(o3.w + n3.w),
        h: g2(o3.h + n3.h)
      };
      const i3 = {
        w: g2((e3 ? e3.w : s3.w + g2(s3.w - o3.w)) + n3.w),
        h: g2((e3 ? e3.h : s3.h + g2(s3.h - o3.h)) + n3.h)
      };
      if (t3) {
        t3();
      }
      tt2 = T2(i3);
      Q2 = z2(getOverflowAmount(r3, i3), a3);
    }
    const [nt2, ot2] = tt2;
    const [st2, et2] = Q2;
    const [ct2, rt2] = G2;
    const [lt2, it2] = J2;
    const [at2, ut2] = A2({
      x: st2.w > 0,
      y: st2.h > 0
    });
    const ft2 = X2 && Y2 && (at2.x || at2.y) || X2 && at2.x && !at2.y || Y2 && at2.y && !at2.x;
    const _t2 = u3 || b3 || y3 || it2 || rt2 || ot2 || et2 || j2 || q2 || W2;
    const dt2 = createViewportOverflowState(at2, F2);
    const [pt2, vt2] = R2(dt2.k);
    const [ht2, gt2] = V2(a3);
    const bt2 = b3 || w3 || gt2 || ut2 || a3;
    const [wt2, yt2] = bt2 ? L2(getMeasuredScrollCoordinates(ht2), a3) : U2();
    if (_t2) {
      if (vt2) {
        setViewportOverflowStyle(dt2.k);
      }
      if (E2 && x2) {
        setStyles(l2, E2(dt2, i2, x2(dt2, ct2, lt2)));
      }
    }
    setMeasuringMode(false);
    addRemoveAttrClass(c2, B, N, ft2);
    addRemoveAttrClass(r2, Z, N, ft2);
    assignDeep(s2, {
      k: pt2,
      Lt: {
        x: nt2.w,
        y: nt2.h
      },
      Vt: {
        x: st2.w,
        y: st2.h
      },
      rn: at2,
      Tt: sanitizeScrollCoordinates(wt2, st2)
    });
    return {
      en: vt2,
      nn: ot2,
      sn: et2,
      cn: yt2 || et2,
      pn: bt2
    };
  };
};
var createStructureSetup = (t2) => {
  const [n2, o2, s2] = createStructureSetupElements(t2);
  const e2 = {
    ln: {
      t: 0,
      r: 0,
      b: 0,
      l: 0
    },
    _n: false,
    j: {
      [y]: 0,
      [S]: 0,
      [w]: 0,
      [v]: 0,
      [h]: 0,
      [b]: 0,
      [g]: 0
    },
    Lt: {
      x: 0,
      y: 0
    },
    Vt: {
      x: 0,
      y: 0
    },
    k: {
      x: H,
      y: H
    },
    rn: {
      x: false,
      y: false
    },
    Tt: getZeroScrollCoordinates()
  };
  const { vt: c2, gt: r2, L: l2, Ot: i2 } = n2;
  const { P: a2, T: u2 } = getEnvironment();
  const f2 = !a2 && (u2.x || u2.y);
  const _2 = [createTrinsicUpdateSegment(n2), createPaddingUpdateSegment(n2, e2), createOverflowUpdateSegment(n2, e2)];
  return [o2, (t3) => {
    const n3 = {};
    const o3 = f2;
    const s3 = o3 && getElementScroll(r2);
    const e3 = s3 && i2();
    each(_2, (o4) => {
      assignDeep(n3, o4(t3, n3) || {});
    });
    scrollElementTo(r2, s3);
    if (e3) {
      e3();
    }
    if (!l2) {
      scrollElementTo(c2, 0);
    }
    return n3;
  }, e2, n2, s2];
};
var createSetups = (t2, n2, o2, s2, e2) => {
  let c2 = false;
  const r2 = createOptionCheck(n2, {});
  const [l2, i2, a2, u2, f2] = createStructureSetup(t2);
  const [_2, d2, p2] = createObserversSetup(u2, a2, r2, (t3) => {
    update({}, t3);
  });
  const [v2, h2, , g2] = createScrollbarsSetup(t2, n2, p2, a2, u2, e2);
  const updateHintsAreTruthy = (t3) => keys(t3).some((n3) => !!t3[n3]);
  const update = (t3, e3) => {
    if (o2()) {
      return false;
    }
    const { vn: r3, Dt: l3, At: a3, hn: u3 } = t3;
    const f3 = r3 || {};
    const _3 = !!l3 || !c2;
    const v3 = {
      It: createOptionCheck(n2, f3, _3),
      vn: f3,
      Dt: _3
    };
    if (u3) {
      h2(v3);
      return false;
    }
    const g3 = e3 || d2(assignDeep({}, v3, {
      At: a3
    }));
    const b2 = i2(assignDeep({}, v3, {
      fn: p2,
      Zt: g3
    }));
    h2(assignDeep({}, v3, {
      Zt: g3,
      tn: b2
    }));
    const w2 = updateHintsAreTruthy(g3);
    const y2 = updateHintsAreTruthy(b2);
    const S2 = w2 || y2 || !isEmptyObject(f3) || _3;
    c2 = true;
    if (S2) {
      s2(t3, {
        Zt: g3,
        tn: b2
      });
    }
    return S2;
  };
  return [() => {
    const { an: t3, gt: n3, Ot: o3 } = u2;
    const s3 = getElementScroll(t3);
    const e3 = [_2(), l2(), v2()];
    const c3 = o3();
    scrollElementTo(n3, s3);
    c3();
    return bind(runEachAndClear, e3);
  }, update, () => ({
    gn: p2,
    bn: a2
  }), {
    wn: u2,
    yn: g2
  }, f2];
};
var Tt = /* @__PURE__ */ new WeakMap();
var addInstance = (t2, n2) => {
  Tt.set(t2, n2);
};
var removeInstance = (t2) => {
  Tt.delete(t2);
};
var getInstance = (t2) => Tt.get(t2);
var OverlayScrollbars = (t2, n2, o2) => {
  const { nt: s2 } = getEnvironment();
  const e2 = isHTMLElement(t2);
  const c2 = e2 ? t2 : t2.target;
  const r2 = getInstance(c2);
  if (n2 && !r2) {
    let r3 = false;
    const l2 = [];
    const i2 = {};
    const validateOptions = (t3) => {
      const n3 = removeUndefinedProperties(t3);
      const o3 = getStaticPluginModuleInstance(R);
      return o3 ? o3(n3, true) : n3;
    };
    const a2 = assignDeep({}, s2(), validateOptions(n2));
    const [u2, f2, _2] = createEventListenerHub();
    const [d2, p2, v2] = createEventListenerHub(o2);
    const triggerEvent = (t3, n3) => {
      v2(t3, n3);
      _2(t3, n3);
    };
    const [h2, g2, b2, w2, y2] = createSetups(t2, a2, () => r3, ({ vn: t3, Dt: n3 }, { Zt: o3, tn: s3 }) => {
      const { dt: e3, Ct: c3, xt: r4, Ht: l3, Et: i3, _t: a3 } = o3;
      const { nn: u3, sn: f3, en: _3, cn: d3 } = s3;
      triggerEvent("updated", [S2, {
        updateHints: {
          sizeChanged: !!e3,
          directionChanged: !!c3,
          heightIntrinsicChanged: !!r4,
          overflowEdgeChanged: !!u3,
          overflowAmountChanged: !!f3,
          overflowStyleChanged: !!_3,
          scrollCoordinatesChanged: !!d3,
          contentMutation: !!l3,
          hostMutation: !!i3,
          appear: !!a3
        },
        changedOptions: t3 || {},
        force: !!n3
      }]);
    }, (t3) => triggerEvent("scroll", [S2, t3]));
    const destroy = (t3) => {
      removeInstance(c2);
      runEachAndClear(l2);
      r3 = true;
      triggerEvent("destroyed", [S2, t3]);
      f2();
      p2();
    };
    const S2 = {
      options(t3, n3) {
        if (t3) {
          const o3 = n3 ? s2() : {};
          const e3 = getOptionsDiff(a2, assignDeep(o3, validateOptions(t3)));
          if (!isEmptyObject(e3)) {
            assignDeep(a2, e3);
            g2({
              vn: e3
            });
          }
        }
        return assignDeep({}, a2);
      },
      on: d2,
      off: (t3, n3) => {
        if (t3 && n3) {
          p2(t3, n3);
        }
      },
      state() {
        const { gn: t3, bn: n3 } = b2();
        const { F: o3 } = t3;
        const { Lt: s3, Vt: e3, k: c3, rn: l3, ln: i3, _n: a3, Tt: u3 } = n3;
        return assignDeep({}, {
          overflowEdge: s3,
          overflowAmount: e3,
          overflowStyle: c3,
          hasOverflow: l3,
          scrollCoordinates: {
            start: u3.D,
            end: u3.M
          },
          padding: i3,
          paddingAbsolute: a3,
          directionRTL: o3,
          destroyed: r3
        });
      },
      elements() {
        const { vt: t3, ht: n3, ln: o3, U: s3, bt: e3, gt: c3, Qt: r4 } = w2.wn;
        const { Xt: l3, Gt: i3 } = w2.yn;
        const translateScrollbarStructure = (t4) => {
          const { kt: n4, Pt: o4, Ut: s4 } = t4;
          return {
            scrollbar: s4,
            track: o4,
            handle: n4
          };
        };
        const translateScrollbarsSetupElement = (t4) => {
          const { Yt: n4, Wt: o4 } = t4;
          const s4 = translateScrollbarStructure(n4[0]);
          return assignDeep({}, s4, {
            clone: () => {
              const t5 = translateScrollbarStructure(o4());
              g2({
                hn: true
              });
              return t5;
            }
          });
        };
        return assignDeep({}, {
          target: t3,
          host: n3,
          padding: o3 || s3,
          viewport: s3,
          content: e3 || s3,
          scrollOffsetElement: c3,
          scrollEventElement: r4,
          scrollbarHorizontal: translateScrollbarsSetupElement(l3),
          scrollbarVertical: translateScrollbarsSetupElement(i3)
        });
      },
      update: (t3) => g2({
        Dt: t3,
        At: true
      }),
      destroy: bind(destroy, false),
      plugin: (t3) => i2[keys(t3)[0]]
    };
    push(l2, [y2]);
    addInstance(c2, S2);
    registerPluginModuleInstances(T, OverlayScrollbars, [S2, u2, i2]);
    if (cancelInitialization(w2.wn.wt, !e2 && t2.cancel)) {
      destroy(true);
      return S2;
    }
    push(l2, h2());
    triggerEvent("initialized", [S2]);
    S2.update();
    return S2;
  }
  return r2;
};
OverlayScrollbars.plugin = (t2) => {
  const n2 = isArray(t2);
  const o2 = n2 ? t2 : [t2];
  const s2 = o2.map((t3) => registerPluginModuleInstances(t3, OverlayScrollbars)[0]);
  addPlugins(o2);
  return n2 ? s2 : s2[0];
};
OverlayScrollbars.valid = (t2) => {
  const n2 = t2 && t2.elements;
  const o2 = isFunction(n2) && n2();
  return isPlainObject(o2) && !!getInstance(o2.target);
};
OverlayScrollbars.env = () => {
  const { N: t2, T: n2, P: o2, G: s2, st: e2, et: c2, Z: r2, tt: l2, nt: i2, ot: a2 } = getEnvironment();
  return assignDeep({}, {
    scrollbarsSize: t2,
    scrollbarsOverlaid: n2,
    scrollbarsHiding: o2,
    scrollTimeline: s2,
    staticDefaultInitialization: e2,
    staticDefaultOptions: c2,
    getDefaultInitialization: r2,
    setDefaultInitialization: l2,
    getDefaultOptions: i2,
    setDefaultOptions: a2
  });
};
OverlayScrollbars.nonce = setNonce;
OverlayScrollbars.trustedTypePolicy = setTrustedTypePolicy;
export {
  zt as ClickScrollPlugin,
  OverlayScrollbars,
  Ht as ScrollbarsHidingPlugin,
  Ct as SizeObserverPlugin
};
/*! Bundled license information:

overlayscrollbars/overlayscrollbars.mjs:
  (*!
   * OverlayScrollbars
   * Version: 2.11.1
   *
   * Copyright (c) Rene Haas | KingSora.
   * https://github.com/KingSora
   *
   * Released under the MIT license.
   *)
*/
//# sourceMappingURL=overlayscrollbars.js.map
